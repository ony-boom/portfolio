---
import { Icon } from "astro-icon/components";
import { language, type Locale } from "../i18n/ui";

interface Props {
  defaultLanguage: Locale;
}

const { defaultLanguage } = Astro.props;
---

<div class="language-picker-container fixed right-4 bottom-4 print:hidden">
  <div
    id="language-dropdown"
    class="fixed right-4 bottom-16 flex flex-col overflow-hidden rounded-xl bg-neutral-900 text-neutral-100 shadow-lg"
    style="display: none;"
  >
    {
      Object.entries(language).map(([locale]) => {
        const isCurrent = defaultLanguage === locale;
        return (
          <button
            class={`${
              isCurrent ? "font-semibold" : ""
            } px-4 py-2 text-left uppercase transition-colors hover:bg-neutral-800`}
            data-locale={locale}
            data-is-current={isCurrent}
          >
            {locale}
          </button>
        );
      })
    }
  </div>
  <button
    id="language-toggle"
    class="flex items-center gap-2 rounded-full bg-neutral-900 px-4 py-2 text-neutral-100 shadow-md transition-colors hover:bg-neutral-800"
    aria-label="Select language"
    aria-expanded="false"
  >
    <Icon name="lucide:globe" size={18} />
    <span class="uppercase">{defaultLanguage}</span>
  </button>
</div>

<script is:inline define:vars={{ defaultLanguage }}>
  document.addEventListener("DOMContentLoaded", () => {
    const toggleButton = document.getElementById("language-toggle");
    const dropdown = document.getElementById("language-dropdown");
    let isOpen = false;

    toggleButton.addEventListener("click", (e) => {
      e.stopPropagation();
      isOpen = !isOpen;
      dropdown.style.display = isOpen ? "flex" : "none";
      toggleButton.setAttribute("aria-expanded", isOpen.toString());
    });

    document.addEventListener("click", (e) => {
      if (isOpen && !e.target.closest(".language-picker-container")) {
        isOpen = false;
        dropdown.style.display = "none";
        toggleButton.setAttribute("aria-expanded", "false");
      }
    });

    dropdown.querySelectorAll("button").forEach((button) => {
      button.addEventListener("click", () => {
        const locale = button.getAttribute("data-locale");
        const isCurrent = button.getAttribute("data-is-current") === "true";

        if (!isCurrent) {
          handleLanguageChange(locale);
        }
      });
    });

    function handleLanguageChange(locale) {
      const currentPath = window.location.pathname;
      let newPath;

      // Remove any language prefix from the current path (more generalized)
      const pathWithoutLang = currentPath.replace(/^\/([a-z]{2})(?:\/|$)/, "/");

      if (locale === "en") {
        newPath = pathWithoutLang;
      } else {
        if (pathWithoutLang === "/" || pathWithoutLang === "") {
          newPath = `/${locale}`;
        } else {
          const cleanPath = pathWithoutLang.startsWith("/")
            ? pathWithoutLang.substring(1)
            : pathWithoutLang;
          newPath = `/${locale}/${cleanPath}`;
        }
      }

      const queryString = window.location.search;
      const hashString = window.location.hash;

      window.location.href = `${newPath}${queryString}${hashString}`;
    }
  });
</script>
